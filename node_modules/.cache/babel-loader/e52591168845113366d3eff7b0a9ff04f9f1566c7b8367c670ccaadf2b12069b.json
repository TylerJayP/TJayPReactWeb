{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\OneDrive\\\\Desktop\\\\TJayPWebsite\\\\src\\\\components\\\\ParticleBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './ParticleBackground.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleBackground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const particlesRef = useRef([]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    canvas.width = width;\n    canvas.height = height;\n\n    // Get theme-aware colors\n    const getThemeColors = () => {\n      const isDark = document.documentElement.getAttribute('data-theme') === 'dark';\n      if (isDark) {\n        return {\n          particles: 'rgba(142, 198, 209, 0.6)',\n          // Teal for dark theme\n          connections: 'rgba(142, 198, 209, 0.2)',\n          accent: 'rgba(107, 156, 165, 0.4)'\n        };\n      } else {\n        return {\n          particles: 'rgba(244, 143, 177, 0.7)',\n          // Soft pink for light theme\n          connections: 'rgba(244, 143, 177, 0.15)',\n          accent: 'rgba(248, 187, 217, 0.5)'\n        };\n      }\n    };\n    class Particle {\n      constructor() {\n        this.x = Math.random() * width;\n        this.y = Math.random() * height;\n        this.vx = (Math.random() - 0.5) * 1.2;\n        this.vy = (Math.random() - 0.5) * 1.2;\n        this.radius = Math.random() * 3 + 1;\n        this.opacity = Math.random() * 0.8 + 0.2;\n        this.pulse = Math.random() * Math.PI * 2;\n        this.pulseSpeed = Math.random() * 0.02 + 0.01;\n      }\n      update() {\n        this.x += this.vx;\n        this.y += this.vy;\n        this.pulse += this.pulseSpeed;\n\n        // Bounce off edges\n        if (this.x < 0 || this.x > width) this.vx *= -1;\n        if (this.y < 0 || this.y > height) this.vy *= -1;\n\n        // Keep particles in bounds\n        this.x = Math.max(0, Math.min(width, this.x));\n        this.y = Math.max(0, Math.min(height, this.y));\n      }\n      draw(ctx, colors) {\n        const pulsedRadius = this.radius + Math.sin(this.pulse) * 0.5;\n        const pulsedOpacity = this.opacity + Math.sin(this.pulse) * 0.2;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, pulsedRadius, 0, Math.PI * 2);\n\n        // Create gradient for each particle\n        const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, pulsedRadius * 2);\n        gradient.addColorStop(0, colors.particles.replace(/[\\d.]+\\)$/g, pulsedOpacity + ')'));\n        gradient.addColorStop(1, colors.accent.replace(/[\\d.]+\\)$/g, pulsedOpacity * 0.1 + ')'));\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n    }\n\n    // Create more particles for fuller effect\n    const particleCount = window.innerWidth > 768 ? 80 : 50;\n    particlesRef.current = [];\n    for (let i = 0; i < particleCount; i++) {\n      particlesRef.current.push(new Particle());\n    }\n    const animate = () => {\n      ctx.clearRect(0, 0, width, height);\n      const colors = getThemeColors();\n      particlesRef.current.forEach(particle => {\n        particle.update();\n        particle.draw(ctx, colors);\n      });\n\n      // Draw connections between nearby particles\n      particlesRef.current.forEach((particle, i) => {\n        for (let j = i + 1; j < particlesRef.current.length; j++) {\n          const dx = particle.x - particlesRef.current[j].x;\n          const dy = particle.y - particlesRef.current[j].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < 120) {\n            const opacity = (1 - distance / 120) * 0.3;\n            ctx.beginPath();\n            ctx.moveTo(particle.x, particle.y);\n            ctx.lineTo(particlesRef.current[j].x, particlesRef.current[j].y);\n            ctx.strokeStyle = colors.connections.replace(/[\\d.]+\\)$/g, opacity + ')');\n            ctx.lineWidth = 1;\n            ctx.stroke();\n          }\n        }\n      });\n\n      // Add some floating geometric shapes occasionally\n      if (Math.random() < 0.005) {\n        const shapes = ['triangle', 'square', 'hexagon'];\n        const shape = shapes[Math.floor(Math.random() * shapes.length)];\n        drawGeometricShape(ctx, colors, shape);\n      }\n      animationRef.current = requestAnimationFrame(animate);\n    };\n    const drawGeometricShape = (ctx, colors, shape) => {\n      const x = Math.random() * width;\n      const y = Math.random() * height;\n      const size = Math.random() * 20 + 10;\n      ctx.strokeStyle = colors.accent;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      switch (shape) {\n        case 'triangle':\n          ctx.moveTo(x, y - size);\n          ctx.lineTo(x - size, y + size);\n          ctx.lineTo(x + size, y + size);\n          ctx.closePath();\n          break;\n        case 'square':\n          ctx.rect(x - size / 2, y - size / 2, size, size);\n          break;\n        case 'hexagon':\n          for (let i = 0; i < 6; i++) {\n            const angle = i * Math.PI / 3;\n            const px = x + size * Math.cos(angle);\n            const py = y + size * Math.sin(angle);\n            if (i === 0) ctx.moveTo(px, py);else ctx.lineTo(px, py);\n          }\n          ctx.closePath();\n          break;\n        default:\n          // Default to circle if shape is unrecognized\n          ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n          break;\n      }\n      ctx.stroke();\n    };\n    animate();\n    const handleResize = () => {\n      width = window.innerWidth;\n      height = window.innerHeight;\n      canvas.width = width;\n      canvas.height = height;\n    };\n\n    // Listen for theme changes\n    const observer = new MutationObserver(() => {\n      // Colors will update automatically on next frame\n    });\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['data-theme']\n    });\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      observer.disconnect();\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"particle-background\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticleBackground, \"AoANNor1ZemK+BAAyEBUpug8tqg=\");\n_c = ParticleBackground;\nexport default ParticleBackground;\nvar _c;\n$RefreshReg$(_c, \"ParticleBackground\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ParticleBackground","_s","canvasRef","animationRef","particlesRef","canvas","current","ctx","getContext","width","window","innerWidth","height","innerHeight","getThemeColors","isDark","document","documentElement","getAttribute","particles","connections","accent","Particle","constructor","x","Math","random","y","vx","vy","radius","opacity","pulse","PI","pulseSpeed","update","max","min","draw","colors","pulsedRadius","sin","pulsedOpacity","beginPath","arc","gradient","createRadialGradient","addColorStop","replace","fillStyle","fill","particleCount","i","push","animate","clearRect","forEach","particle","j","length","dx","dy","distance","sqrt","moveTo","lineTo","strokeStyle","lineWidth","stroke","shapes","shape","floor","drawGeometricShape","requestAnimationFrame","size","closePath","rect","angle","px","cos","py","handleResize","observer","MutationObserver","observe","attributes","attributeFilter","addEventListener","removeEventListener","disconnect","cancelAnimationFrame","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tyler/OneDrive/Desktop/TJayPWebsite/src/components/ParticleBackground.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './ParticleBackground.css';\n\nconst ParticleBackground = () => {\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const particlesRef = useRef([]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    // Get theme-aware colors\n    const getThemeColors = () => {\n      const isDark = document.documentElement.getAttribute('data-theme') === 'dark';\n      \n      if (isDark) {\n        return {\n          particles: 'rgba(142, 198, 209, 0.6)', // Teal for dark theme\n          connections: 'rgba(142, 198, 209, 0.2)',\n          accent: 'rgba(107, 156, 165, 0.4)'\n        };\n      } else {\n        return {\n          particles: 'rgba(244, 143, 177, 0.7)', // Soft pink for light theme\n          connections: 'rgba(244, 143, 177, 0.15)',\n          accent: 'rgba(248, 187, 217, 0.5)'\n        };\n      }\n    };\n\n    class Particle {\n      constructor() {\n        this.x = Math.random() * width;\n        this.y = Math.random() * height;\n        this.vx = (Math.random() - 0.5) * 1.2;\n        this.vy = (Math.random() - 0.5) * 1.2;\n        this.radius = Math.random() * 3 + 1;\n        this.opacity = Math.random() * 0.8 + 0.2;\n        this.pulse = Math.random() * Math.PI * 2;\n        this.pulseSpeed = Math.random() * 0.02 + 0.01;\n      }\n\n      update() {\n        this.x += this.vx;\n        this.y += this.vy;\n        this.pulse += this.pulseSpeed;\n\n        // Bounce off edges\n        if (this.x < 0 || this.x > width) this.vx *= -1;\n        if (this.y < 0 || this.y > height) this.vy *= -1;\n\n        // Keep particles in bounds\n        this.x = Math.max(0, Math.min(width, this.x));\n        this.y = Math.max(0, Math.min(height, this.y));\n      }\n\n      draw(ctx, colors) {\n        const pulsedRadius = this.radius + Math.sin(this.pulse) * 0.5;\n        const pulsedOpacity = this.opacity + Math.sin(this.pulse) * 0.2;\n        \n        ctx.beginPath();\n        ctx.arc(this.x, this.y, pulsedRadius, 0, Math.PI * 2);\n        \n        // Create gradient for each particle\n        const gradient = ctx.createRadialGradient(\n          this.x, this.y, 0,\n          this.x, this.y, pulsedRadius * 2\n        );\n        gradient.addColorStop(0, colors.particles.replace(/[\\d.]+\\)$/g, pulsedOpacity + ')'));\n        gradient.addColorStop(1, colors.accent.replace(/[\\d.]+\\)$/g, (pulsedOpacity * 0.1) + ')'));\n        \n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n    }\n\n    // Create more particles for fuller effect\n    const particleCount = window.innerWidth > 768 ? 80 : 50;\n    particlesRef.current = [];\n    for (let i = 0; i < particleCount; i++) {\n      particlesRef.current.push(new Particle());\n    }\n\n    const animate = () => {\n      ctx.clearRect(0, 0, width, height);\n      const colors = getThemeColors();\n      \n      particlesRef.current.forEach(particle => {\n        particle.update();\n        particle.draw(ctx, colors);\n      });\n\n      // Draw connections between nearby particles\n      particlesRef.current.forEach((particle, i) => {\n        for (let j = i + 1; j < particlesRef.current.length; j++) {\n          const dx = particle.x - particlesRef.current[j].x;\n          const dy = particle.y - particlesRef.current[j].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < 120) {\n            const opacity = (1 - distance / 120) * 0.3;\n            ctx.beginPath();\n            ctx.moveTo(particle.x, particle.y);\n            ctx.lineTo(particlesRef.current[j].x, particlesRef.current[j].y);\n            ctx.strokeStyle = colors.connections.replace(/[\\d.]+\\)$/g, opacity + ')');\n            ctx.lineWidth = 1;\n            ctx.stroke();\n          }\n        }\n      });\n\n      // Add some floating geometric shapes occasionally\n      if (Math.random() < 0.005) {\n        const shapes = ['triangle', 'square', 'hexagon'];\n        const shape = shapes[Math.floor(Math.random() * shapes.length)];\n        drawGeometricShape(ctx, colors, shape);\n      }\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    const drawGeometricShape = (ctx, colors, shape) => {\n      const x = Math.random() * width;\n      const y = Math.random() * height;\n      const size = Math.random() * 20 + 10;\n      \n      ctx.strokeStyle = colors.accent;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      \n      switch(shape) {\n        case 'triangle':\n          ctx.moveTo(x, y - size);\n          ctx.lineTo(x - size, y + size);\n          ctx.lineTo(x + size, y + size);\n          ctx.closePath();\n          break;\n        case 'square':\n          ctx.rect(x - size/2, y - size/2, size, size);\n          break;\n        case 'hexagon':\n          for (let i = 0; i < 6; i++) {\n            const angle = (i * Math.PI) / 3;\n            const px = x + size * Math.cos(angle);\n            const py = y + size * Math.sin(angle);\n            if (i === 0) ctx.moveTo(px, py);\n            else ctx.lineTo(px, py);\n          }\n          ctx.closePath();\n          break;\n        default:\n          // Default to circle if shape is unrecognized\n          ctx.arc(x, y, size/2, 0, Math.PI * 2);\n          break;\n      }\n      ctx.stroke();\n    };\n\n    animate();\n\n    const handleResize = () => {\n      width = window.innerWidth;\n      height = window.innerHeight;\n      canvas.width = width;\n      canvas.height = height;\n    };\n\n    // Listen for theme changes\n    const observer = new MutationObserver(() => {\n      // Colors will update automatically on next frame\n    });\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['data-theme']\n    });\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      observer.disconnect();\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} className=\"particle-background\" />;\n};\n\nexport default ParticleBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}